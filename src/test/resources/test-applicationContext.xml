<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/mvc           http://www.springframework.org/schema/mvc/spring-mvc.xsd
                            http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <bean id="jdbcTemplate" class="org.easymock.EasyMock" factory-method="createStrictMock">
        <constructor-arg value="org.springframework.jdbc.core.JdbcTemplate"/>
    </bean>

    <bean id="conversionHelper" class="org.easymock.EasyMock" factory-method="createStrictMock" primary="true">
        <constructor-arg value="be.svk.webapp.service.DTOConversionHelper"/>
    </bean>

    <!-- SET default mail properties -->
    <bean id="mailService" class="org.easymock.EasyMock" factory-method="createStrictMock">
        <constructor-arg value="be.svk.webapp.service.MailService"/>
    </bean>
    <bean id="securityUtils" class="org.easymock.EasyMock" factory-method="createStrictMock">
        <constructor-arg value="be.svk.webapp.utils.SecurityUtils"/>
    </bean>

    <!-- recatchpa -->
    <bean id="reCaptchaImpl" class="org.easymock.EasyMock" factory-method="createStrictMock">
        <constructor-arg value="net.tanesha.recaptcha.ReCaptchaImpl"/>
    </bean>

    <!-- Spring social -->
    <bean id="providerSignInUtilsImpl" class="org.easymock.EasyMock" factory-method="createStrictMock">
        <constructor-arg value="org.springframework.social.connect.web.ProviderSignInUtils"/>
    </bean>

    <import resource="test-data-context.xml"/>
    <import resource="test-security-context.xml"/>


    <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
    <mvc:resources mapping="/resources/**" location="/resources/"/>

    <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <bean id="messageSource"
          class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
          p:basename="classpath:messages">
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>

    <bean id="objectMapper"
          class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"
          p:indentOutput="true" p:simpleDateFormat="yyyy-MM-dd'T'HH:mm:ss.SSSZ">
    </bean>
    <bean
            class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"
            p:targetObject-ref="objectMapper" p:targetMethod="registerModule">
        <property name="arguments">
            <list>
                <bean class="com.fasterxml.jackson.datatype.joda.JodaModule" />
            </list>
        </property>
    </bean>

    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter" />
            <bean
                    class="org.springframework.http.converter.ResourceHttpMessageConverter" />

            <bean
                    class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper" ref="objectMapper" />
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <context:property-placeholder location="classpath:test.properties"/>

    <!-- You can have some pre-configured messagess also which are ready to send -->
    <bean id="preConfiguredMessage" class="org.springframework.mail.SimpleMailMessage">
        <property name="to" value="voetbalsvk@gmail.com"></property>
        <property name="from" value="voetbalsvk@gmail.com"></property>
        <property name="subject" value="SVK - Message"/>
    </bean>
</beans>
